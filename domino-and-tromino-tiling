
import java.util.Scanner;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the value of n: ");
        int n = scanner.nextInt();
        System.out.println("Number of ways to tile a 2 x " + n + " board: " + numTilings(n));
        scanner.close();
    }

    public static int numTilings(int n) {
        if (n == 1) return 1;
        if (n == 2) return 2;

        int[][] transitionMatrix = {{2, 1}, {1, 0}};
        int[][] baseState = {{2}, {1}};

        int[][] result = matrixExponentiation(transitionMatrix, n - 2);
        result = multiplyMatrices(result, baseState);

        return result[0][0];
    }

    private static int[][] matrixExponentiation(int[][] matrix, int power) {
        if (power == 1) return matrix;
        if (power == 0) {
            int[][] identityMatrix = {{1, 0}, {0, 1}};
            return identityMatrix;
        }

        int[][] result = matrixExponentiation(matrix, power / 2);
        result = multiplyMatrices(result, result);

        if (power % 2 == 1) {
            result = multiplyMatrices(result, matrix);
        }

        return result;
    }

    private static int[][] multiplyMatrices(int[][] a, int[][] b) {
        int rowsA = a.length;
        int colsA = a[0].length;
        int colsB = b[0].length;

        int[][] result = new int[rowsA][colsB];

        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] = (int)(((long)result[i][j] + ((long)a[i][k] * b[k][j]) % MOD) % MOD);
                }
            }
        }

        return result;
    }
}
